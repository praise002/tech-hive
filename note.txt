function App() {
  // Define the inputs configuration
  const inputs = [
    {
      name: 'firstName',
      placeholder: 'Jack',
      rules: { required: 'First name is required' },
    },
    {
      name: 'lastName',
      placeholder: 'Smith',
      rules: { required: 'Last name is required' },
    },
    {
      name: 'email',
      placeholder: 'jack@example.com',
      type: 'email',
      rules: {
        required: 'Email is required',
        pattern: {
          value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
          message: 'Invalid email address',
        },
      },
    },
    {
      name: 'password',
      type: 'password',
      rules: {
        required: 'Password is required',
        minLength: {
          value: 6,
          message: 'Password must be at least 6 characters',
        },
      },
    },
  ];

  // Handle form submission
  const handleFormSubmit = (data) => {
    console.log('Form Data:', data);
    alert('Form submitted successfully!');
  };

  return (
    <div className="max-w-md mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Sign Up</h1>
      <Form inputs={inputs} onSubmit={handleFormSubmit} />
    </div>
  );
}

export default App;

import Button from '../common/Button';
import Text from '../common/Text';

function HeroSection({ isLoggedIn, userRole }) {
  return (
    <div className="relative mt-12 bg-gradient-to-r from-coral/50 to-peach py-10 px-7 sm:py-20 sm:px-14 overflow-hidden">
      {/* ✅ SVG Background */}
      <img
        src="/assets/hero-section.svg"
        alt="Background"
        className="pointer-events-none absolute inset-0 w-full h-full object-cover opacity-70"
      />
      
      {/* ✅ Text and Buttons */}
      <Text variant="h2" size="2xl" align="center" className="sm:text-3xl mb-8">
        Your Gateway to the Latest in <br /> Tech Innovation
      </Text>

      <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4 mb-8">
        {/* Conditional Rendering Based on Login Status */}
        {isLoggedIn ? (
          userRole === 'editor' ? (
            <Button type="submit" variant="outline" onClick={() => alert('Redirecting to Editor Dashboard')}>
              Editor Dashboard
            </Button>
          ) : (
            <Button type="submit" variant="outline" onClick={() => alert('Redirecting to User Profile')}>
              My Profile
            </Button>
          )
        ) : (
          <>
            <Button type="submit" variant="outline" onClick={() => alert('Logged in!')}>
              Login
            </Button>
            <Button type="submit" onClick={() => alert('Registered!')}>
              Register
            </Button>
          </>
        )}
      </div>

      <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4">
        <p className="italic text-gray-800">Never miss an update!</p>
        <Button
          type="submit"
          variant="gradient"
          onClick={() => alert('Subscribed to newsletter!')}
        >
          Subscribe to newsletter
        </Button>
      </div>
    </div>
  );
}

export default HeroSection;

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [userRole, setUserRole] = useState('user');

  return (
    <div>
      <HeroSection isLoggedIn={isLoggedIn} userRole={userRole} />
      <button onClick={() => setIsLoggedIn(!isLoggedIn)}>
        Toggle Login
      </button>
      <button onClick={() => setUserRole(userRole === 'user' ? 'editor' : 'user')}>
        Toggle Role
      </button>
    </div>
  );
}

const [isUploading, setIsUploading] = useState(false);
const [error, setError] = useState(null);

async function handleProfilePicChange(event) {
  const file = event.target.files[0];
  if (file) {
    // Validate file type
    if (!file.type.startsWith('image/')) {
      setError('Please select an image file');
      return;
    }
    
    // Validate file size (e.g., max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      setError('Image must be less than 5MB');
      return;
    }

    try {
      setIsUploading(true);
      setError(null);
      
      // Create temporary preview
      const imageUrl = URL.createObjectURL(file);
      
      // TODO: Upload to server
      // const uploadedUrl = await uploadImage(file);
      
      setProfile(prev => ({
        ...prev,
        profilePicture: imageUrl
      }));
    } catch (err) {
      setError('Failed to upload image');
    } finally {
      setIsUploading(false);
    }
  }
}

const [showPassword, setShowPassword] = useState(false);

const inputs = [
  // ...existing inputs
  {
    name: 'password',
    type: showPassword ? 'text' : 'password',
    placeholder: 'Password',
    icon: (
      <div onClick={() => setShowPassword(!showPassword)}>
        {showPassword ? (
          <IoIosEyeOff className="text-gray-500 cursor-pointer" />
        ) : (
          <IoIosEye className="text-gray-500 cursor-pointer" />
        )}
      </div>
    ),
    rules: {
      required: 'Password is required',
      minLength: {
        value: 6,
        message: 'Password must be at least 6 characters',
      },
    },
  },
];

import { IoIosEye, IoIosEyeOff } from 'react-icons/io';